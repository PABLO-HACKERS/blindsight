########################################################################
## IMPORTS
########################################################################
import sys
import os
from PySide6 import *
from PyQt5.QtWidgets import QApplication

########################################################################
# IMPORT GUI FILE
from interface import *
########################################################################
import sys
import cv2
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtCore import QTimer
from PyQt5.QtGui import QImage, QPixmap

# Import the UI class generated by Qt Designer (adjust the import to your project)
from interface import Ui_MainWindow  
########################################################################
# IMPORT Custom widgets
from Custom_Widgets import *
########################################################################


########################################################################
## MAIN WINDOW CLASS
########################################################################
class MainWindow(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        ########################################################################
        # APPLY JSON STYLESHEET
        ########################################################################
        # self = QMainWindow class
        # self.ui = Ui_MainWindow / user interface class
        loadJsonStyle(self, self.ui)
        ########################################################################

        ########################################################################

        self.show()
        self.ui.settingsBtn.clicked.connect(lambda:self.ui.centerMenuContainer.expandMenu())
        self.ui.informationBtn.clicked.connect(lambda:self.ui.centerMenuContainer.expandMenu())
        self.ui.helpBtn.clicked.connect(lambda:self.ui.centerMenuContainer.expandMenu())

        self.ui.closeCenterMenuBtn.clicked.connect(lambda:self.ui.centerMenuContainer.collapseMenu())

        self.ui.moreBtn.clicked.connect(lambda:self.ui.rightMenuContainer.expandMenu())
        self.ui.profileBtn.clicked.connect(lambda:self.ui.rightMenuContainer.expandMenu())

        self.ui.closeRightMenuBtn.clicked.connect(lambda:self.ui.rightMenuContainer.collapseMenu())
          # Open the camera (index 0 is usually the default camera)
        self.capture = cv2.VideoCapture(0)
        if not self.capture.isOpened():
            print("Error: Cannot open camera")
            sys.exit()

        # Set up a QTimer to update the label with the camera feed
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_frame)
        self.timer.start(30)  # roughly 33 fps

    def update_frame(self):
        ret, frame = self.capture.read()
        if ret:
            # Convert the captured frame from BGR to RGB
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            # Convert the frame to QImage
            height, width, channels = frame.shape
            bytes_per_line = channels * width
            q_img = QImage(frame.data, width, height, bytes_per_line, QImage.Format_RGB888)
            
            # Update the QLabel with the new frame
            self.ui.label_10.setPixmap(QPixmap.fromImage(q_img))
        else:
            print("Failed to capture frame")

    def closeEvent(self, event):
        # Release the camera when the window is closed
        if self.capture.isOpened():
            self.capture.release()
        event.accept()





########################################################################
## EXECUTE APP
########################################################################
if __name__ == "__main__":
    app = QApplication(sys.argv)
   
    window = MainWindow()
    sys.exit(app.exec_())
########################################################################
## END===>
########################################################################  